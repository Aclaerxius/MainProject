function error(message, config) {
  if config.ignore_errors {
    exit(0)
  } else {
    print(message)
    exit(1)
  }
}

const valid_sort_columns: string[] = ["volume", ... ]

sort { 
  column: string,
  order: string (or int, or an enum)
}

userconfig {
  sort: sort[]
  limit: int
  pairs: string[]
  is_live: boolean
  ignore_errors: bool
  has_trend: bool

  static parse (argc, argv) -> userconfig {
    // TODO: parse the argc and argv and create a user config class if everything is ok, if its not, print error
  }

  static print_help() {
    // TODO: print instructions for usage
  }
}


bianncedatamodel {
  symbol: string, 
  priceChange: double,
  priceChangePercent: double,
  ...
   
  // TODO: add all fields from the binance object here

  static parse(json_object) -> bianncedatamodel {
    // TODO: parse all fields from json object into bianncedatamodel, print error if something is wrong

  }
}

requestmanager {
  url: string

  constructor(url) {
    this.url = url;
  }

  get_data() -> bianncedatamodel[] {
    response_as_string = // TODO: make http request to the url, handle error if it fails

    response_as_json = json::parse(response_as_string)

    let binance_models = []

    for i = 0, i< response_as_json.length(), i++ {
      let json_object = response_as_json[i];
      let binance_model = bianncedatamodel::parse(json_object)
      binance_models.push(binance_model)
    }
  }
  return binance_models
}


outputmodel {
    symbol: string
    price: double
    price_change_percentage:double,
    volume: double,
    number_of_trades: integer
    trend: double
}

outputcomputationmanager {
  config: userconfig
  
  last_binance_models: []

  display_models: outputmodel[]

  constructor(config) {
    this.config = config
  }
    
  add_new_data(binance_models) {
    //
    // TODO: calculate the outputmodels for all symbols, comparing them to the previous models (if they exist) and save them into display_models

    // update the previous models to the new ones
    this.last_binance_models = binance_models
  }


  get_display_models() -> outputmodel[] {
     return this.outputmodel
  }

}

displaymanager {

  config: userconfig

  constructor(config) { 
    this.config = config
  }

  print_table(outputmodel[]) {
    // TODO: compose the output table and print it to the console
  }
}


main (argc, argv) {
  config = userconfig::parse(argc, argv)

  request_manager = new requestmanager(https://...<url of binance>)

  output_computation_manager = new outputcomputationmanager(config)

  display_manager = new display_manager(config)

  while (true) {

    binance_models = request_manager.get_data();

    output_computation_manager.add_new_data(binance_models)

    output_models = output_computation_manager.get_display_models()

    displaymanager.print_table(output_models)

    // TODO:  sleep(<number of seconds to sleep, according to the --live flag..or break>)
  }

}
